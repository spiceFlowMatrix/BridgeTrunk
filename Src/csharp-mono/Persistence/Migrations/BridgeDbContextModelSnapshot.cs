// <auto-generated />
using System;
using Bridge.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bridge.Persistence.Migrations
{
    [DbContext(typeof(BridgeDbContext))]
    partial class BridgeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bridge.Domain.Entities.AddtionalServices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Price")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AddtionalServices");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AgentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Commission")
                        .HasColumnType("int");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AgentCategory");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AnswerFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AnswerFile");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AppTimeTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActivityTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Grade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HardwarePlatform")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Isp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NetworkSpeed")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Outtime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("School")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceProvider")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectsTaken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AppTimeTracks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AssignmentFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AssignmentFile");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AssignmentStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AssignmentStudent");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AssignmentSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSubmission")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.AssignmentSubmissionFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AssignmentSubmissionFiles");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Books", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BookPublisher")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<string>("GradeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PublishedTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PublisherUserId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("coverimage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Buckets", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BucketName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Buckets");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Bundle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Bundle");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.BundleCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BundleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BundleCourse");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ChapterProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Progress")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ChapterProgresses");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ChapterQuiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("chapterQuiz");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("PassMark")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("istrial")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.CourseDefination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BasePrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CourseDefination");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.CourseGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Gradeid")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CourseGrade");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.CourseItemProgressSync", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("IsStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Lessonid")
                        .HasColumnType("bigint");

                    b.Property<long>("Lessonprogress")
                        .HasColumnType("bigint");

                    b.Property<long>("Quizid")
                        .HasColumnType("bigint");

                    b.Property<long>("Userid")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CourseItemProgressSync");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("symbol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DefaultValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("intervals")
                        .HasColumnType("int");

                    b.Property<bool>("istimeouton")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("reminder")
                        .HasColumnType("int");

                    b.Property<int>("timeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DefaultValues");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Deposit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DepositDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DocumentIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRevoke")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SalesAgentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FreeSubscriptions")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OffSubscriptions")
                        .HasColumnType("int");

                    b.Property<int>("OffTotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscountPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DiscountPackage");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionCommentFiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DiscussionCommentFiles");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionCommentLikes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("DisLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Like")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DiscussionCommentLikes");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionComments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DiscussionComments");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionFiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DiscussionFiles");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionTopic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DiscussionTopic");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DiscussionTopicLikes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("DisLike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Like")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DiscussionTopicLikes");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.DocumentDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DocumentDetails");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ERPAccounts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccountCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ERPAccounts");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeebackTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FeebackTime");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long>("FeedbackTaskId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FeedBackActivity");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FeedBackCategory");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackStaff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedBackId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FeedBackStaff");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileLink")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FeedBackTask");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackTaskStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FeedBackTaskStatus");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedBackTaskStatusOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FeedBackTaskStatusOption");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long>("Contactid")
                        .HasColumnType("bigint");

                    b.Property<long>("Coordinator")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("QaUser")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FeedbackFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FeedtimeId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FeedbackFile");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FileProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("Progress")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FileProgresses");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.FileTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Filetype")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Files", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.IndividualDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CityId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FatherNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdCardNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaritalStatusId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentTazrika")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PreviousMarksheets")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RefferedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SexId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SocialMediaAccount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SoicalMediaLinked")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StudentCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StudentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StudentTazkira")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Village")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("IndividualDetails");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("LessonAssignments");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonAssignmentFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("LessonAssignmentFiles");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonAssignmentSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSubmission")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LessonAssignmentSubmissions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonAssignmentSubmissionFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LessonAssignmentSubmissionFiles");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LessonFile");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LessonProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("int");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("Progress")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LessonProgresses");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LogObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("EntityKey")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LogObjects");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.LogObjectTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Action")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EntityType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("LogObjectTypes");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Logs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TestColumn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ManagementInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("individual_receipt_notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("noon_background")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("sales_partner_dari")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("sales_partner_eng")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("school_receipt_notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ManagementInfo");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.MetaDataDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DetailId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetailTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("MetadataId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MetaDataDetail");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.NotificationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LogObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotifiedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Price")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.PackageCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PackageCourses");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ProgessSync", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("LessonProgress")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("LessonProgressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalRecords")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProgessSync");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.ProgressStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ProgressStatus");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.PurchagePdf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PdfFile")
                        .HasColumnType("bigint");

                    b.Property<string>("PurchageId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PurchagePdf");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.PurchageUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PdfFile")
                        .HasColumnType("bigint");

                    b.Property<string>("PurchageId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PurchageUpload");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Explanation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultiAnswer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ExtraText")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuestionFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("QuestionFile");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuestionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6);

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("NumQuestions")
                        .HasColumnType("int");

                    b.Property<decimal>("PassMark")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuizProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Progress")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("QuizProgresses");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestion");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuizSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QSummary")
                        .HasColumnType("int");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("QuizSummary");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuizTimerSync", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("passingScore")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("quizId")
                        .HasColumnType("bigint");

                    b.Property<string>("quizTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("yourScore")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("QuizTimerSync");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.SalesAgent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AgentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("AgentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AgreedMonthlyDeposit")
                        .HasColumnType("int");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FocalPoint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PartnerBackgroud")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SalesAgent");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.SalesTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SalesTax");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.SchoolDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingOwnershipId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Computers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Dongles")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InternetAccessId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Monitors")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumberOfStaffFemale")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfStaffMale")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfStudentFemale")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfStudentMale")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTeacherFemale")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTeacherMale")
                        .HasColumnType("int");

                    b.Property<string>("PowerAddressId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RegisterationPaper")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Routers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolLicense")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolTypeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SectionTypeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SchoolDetails");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudParent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudParents");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudentChapterProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudentChapterProgress");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudentCourseProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CourseProgress")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("CourseStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudentCourseProgress");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudentFileProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("FileProgress")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudentFileProgress");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudentLessonProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LessonProgress")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("LessonStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudentLessonProgress");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.StudentProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CourseProgress")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("CourseStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("LessonStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("StudentProgress");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Subcriptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.SubscriptionMetadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CourseId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DiscountPackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("EnrollmentFromDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EnrollmentToDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NoOfMonths")
                        .HasColumnType("int");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PurchageId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SalesAgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionMetadata");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Subscriptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SubscriptionMetadataId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TaskActivityCategoryFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TaskActivityCategoryFeedBacks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TaskActivityFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TaskActivityFeedBacks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TaskCategoryFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TaskCategoryFeedBacks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TaskFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AppVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ArchivedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Assign")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("ComplatedDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Device")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Version")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TaskFeedBacks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TaskFileFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TaskFileFeedBacks");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TermsAndConditions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Terms")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.TimeInterval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TimeIntervals");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("forgotkey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("intervals")
                        .HasColumnType("int");

                    b.Property<bool>("is_assignment_authorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_discussion_authorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_library_authorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_skippable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isallowmap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isfirstlogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isforgot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("istimeouton")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("istrial")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("reminder")
                        .HasColumnType("int");

                    b.Property<int>("timeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.UserCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EndDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsExpire")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserCourse");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.UserNotifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("LessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.UserQuizResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AnsweredQuestion")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PassingScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PerformDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuestion")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserQuizResults");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.UserSessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeletionTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceType")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModificationTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Bridge.Domain.Entities.Question", b =>
                {
                    b.HasOne("Bridge.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("Bridge.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("Bridge.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bridge.Domain.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
